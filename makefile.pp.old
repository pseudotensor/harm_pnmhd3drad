#
#echo "Make sure MPICH/GM params set in both global.h and makefile!"
#echo "Make sure MPICH/GM params set in both global.h and makefile!"
USEMPICH=0
USEGM=0

USECCC=1
USEGCC=1
USEEGCS=1

USENCSA=0

ifeq ($(USEGCC),1)
COMP = gcc
endif
ifeq ($(USEEGCS),1)
COMP = egcs
endif
ifeq ($(USECCC),1)
COMP = ccc
endif

ifeq ($(USEGM),1)
MCC=mpicc.gm
endif
ifeq ($(USEGM),0)
MCC=mpicc
endif 

#General env. vars
RM = rm -f
SUFF = c
#
# Define a cpp source file directory, a fortran file subdirectory,
# an object file subdirectory and an executable file subdirectory
#
SRCD = .
OBJD = .
OBJD2 = ./Obj
BIND = ./bin

CMD = $(BIND)/postproc

#
# Define preprocessor and compile flags, and linked libraries
#
# linux on a pentium
ifeq ($(HOSTTYPE),i386)

ifeq ($(USEGCC),1)
COMP = gcc
endif
ifeq ($(USEEGCS),1)
COMP = egcs
endif

#CFLAGS = -Wall -mpentium -O3 -pipe  -malign-loops=2 -malign-jumps=2 -malign-functions=2 -DCPU=686 -DNEED_GETOPT -DLINUX -ffast-math
#CFLAGS = -Wall -mpentium -O3 -pipe  -malign-loops=2 -malign-jumps=2 -malign-functions=2 -DCPU=686 -DNEED_GETOPT -DLINUX -ffast-math -pg
#CFLAGS = -Wall -mcpu=pentiumpro -march=pentiumpro -O4 -pipe  -malign-loops=2 -malign-jumps=2 -malign-functions=2 -malign-double -mstack-align-double -ffast-math -pg
#CFLAGS = -Wall -mcpu=pentiumpro -march=pentiumpro -O4 -malign-loops=2 -malign-jumps=2 -malign-functions=2 -malign-double -mstack-align-double -ffast-math -finline-functions -pg
#CFLAGS = -Wall -mcpu=pentiumpro -march=pentiumpro -O4 -malign-loops=2 -malign-jumps=2 -malign-functions=2 -malign-double -ffast-math -finline-functions -pg
#CFLAGS = -Wall -mcpu=pentiumpro -march=pentiumpro -O3 -malign-loops=2 -malign-jumps=2 -malign-functions=2 -ffast-math -finline-functions -pg -g -a
CFLAGS = -Wall -mcpu=pentiumpro -march=pentiumpro -O4 -malign-loops=2 -malign-jumps=2 -malign-functions=2 -ffast-math -finline-functions -g
#-pg
#-pg -g  source lines
#-pg -g -a   line count
# gprof -l <file> > out.txt
# gprof -A -I<sourcedir>
# gprof -l -A -x s

#below is typical flags for double precision...can take -pg off for no profile
#add -mstack-align-double if using pgcc
#CFLAGS = -Wall -O0 -g
#  -fomit-frame-pointer



#CFLAGS = -Wall -O0
#CFLAGS = -O6 -g
#CFLAGS = -O0 -pg -g
LDFLAGS = -lm

#CC = cc
#AR	=	ar r
#RANLIB	=	ranlib

endif # endif i386

# linux on a pentium
ifeq ($(HOSTTYPE),i686)

ifeq ($(USEGCC),1)
COMP = gcc
endif
ifeq ($(USEEGCS),1)
COMP = egcs
endif

CFLAGS = -Wall -mcpu=pentiumpro -march=pentiumpro -O4 -malign-loops=2 -malign-jumps=2 -malign-functions=2 -malign-double -ffast-math -finline-functions -pg

#below is typical flags for double precision...can take -pg off for no profile
#add -mstack-align-double if using pgcc
#CFLAGS = -Wall -O0 -g
#  -fomit-frame-pointer

LDFLAGS = -lm

#CC = cc
#AR	=	ar r
#RANLIB	=	ranlib

endif # endif i686





# Define preprocessor and compile flags, and linked libraries

ifeq ($(HOSTTYPE),alpha)
LDFLAGS = -lm

ifeq ($(USECCC),1)
#CDEBUG = -g3 # -g3 for higher opts than -O0
#CDEBUG = -g
#CDEBUG = 
# production level
CFLAGS3 = -Wall -O4 -fast -msg_disable badsubscript -msg_disable subscrbounds -msg_disable unreachcode -msg_disable noparmlist -msg_disable subscrbounds2
# super annoying develop level
#CFLAGS3 = -Wall -O2 -fast
#CFLAGS3 = -fast -arch ev67
# debug level
#CFLAGS3 = -Wall -O0 -msg_disable badsubscript -msg_disable subscrbounds -msg_disable unreachcode -msg_disable noparmlist -msg_disable subscrbounds2

ifeq ($(USEMPICH),1)

CC=$(MCC) -cc=$(COMP) $(CFLAGS3) $(CFLAGS2) $(CDEBUG)

ifeq ($(HOSTNAME),photon.physics.uiuc.edu)
CFLAGS2 = -arch ev6
endif

ifeq ($(HOSTNAME),rainman.physics.uiuc.edu)
CFLAGS2 = -arch ev6
endif


ifeq ($(HOSTNAME),wiseguy.physics.uiuc.edu)
CFLAGS2 = -arch ev56
endif

ifeq ($(HOSTNAME),alphadog.physics.uiuc.edu)
CFLAGS2 = -arch ev56
endif

endif # endif usempich==1

ifeq ($(USEMPICH),0)

ifeq ($(HOSTNAME),photon.physics.uiuc.edu)
CFLAGS2 = -arch ev67
endif

ifeq ($(HOSTNAME),rainman.physics.uiuc.edu)
CFLAGS2 = -arch ev6
endif

ifeq ($(HOSTNAME),wiseguy.physics.uiuc.edu)
CFLAGS2 = -arch ev56
endif

ifeq ($(HOSTNAME),alphadog.physics.uiuc.edu)
CFLAGS2 = -arch ev56
endif

CC=$(COMP)  $(CFLAGS3) $(CFLAGS2) $(CDEBUG)

endif # endif usempich==0

endif # endif useccc==1

ifeq ($(USECCC),0)
#CDEBUG = -g
CDEBUG = -pg -g
#-pg
#-pg -g  source lines
#-pg -g -a   line count (doesn't work on photon)
# gprof -l <file> > out.txt
# gprof -A -I<sourcedir>
# gprof -l -A -x s
#CDEBUG =
CFLAGS3 = -O4 -Wall
#CFLAGS3 = -O0 -Wall


ifeq ($(USEMPICH),1)

CC=$(MCC) -cc=$(COMP) $(CFLAGS3) $(CFLAGS2) $(CDEBUG)

endif

ifeq ($(USEMPICH),0)

CC=$(COMP) $(CFLAGS3) $(CFLAGS2) $(CDEBUG)

endif


endif # endif use usempich==1



endif # endif alpha


#
# Define source files
#
SRCS = \
$(SRCD)/analsol.$(SUFF) \
$(SRCD)/bound.$(SUFF) \
$(SRCD)/diag.$(SUFF) \
$(SRCD)/init.$(SUFF) \
$(SRCD)/postproc.$(SUFF) \
$(SRCD)/numerics.$(SUFF) \
$(SRCD)/ranc.$(SUFF) \
$(SRCD)/step.$(SUFF) \
$(SRCD)/sweep.$(SUFF) \
$(SRCD)/dqcalc.$(SUFF) \
$(SRCD)/timestep.$(SUFF) \
$(SRCD)/utilfun.$(SUFF) \
$(SRCD)/steptvdlf.$(SUFF) \
#$(SRCD)/nrutil.$(SUFF)

#
# Define object files
#                                         
OBJS = \
$(OBJD)/analsol.o \
$(OBJD)/bound.o \
$(OBJD)/diag.o \
$(OBJD)/init.o \
$(OBJD)/postproc.o \
$(OBJD)/numerics.o \
$(OBJD)/ranc.o \
$(OBJD)/step.o \
$(OBJD)/sweep.o \
$(OBJD)/dqcalc.o \
$(OBJD)/timestep.o \
$(OBJD)/utilfun.o \
$(OBJD)/steptvdlf.o \
#$(OBJD)/nrutil.o




#
all: 	$(OBJD) $(BIND) $(CMD)
#
$(OBJD):
	mkdir $(OBJD)

$(BIND):
	mkdir $(BIND)

$(CMD): $(OBJS) $(SRCS) makefile
	$(CC) $(CFLAGS) -o $(CMD) $(OBJS) $(LDFLAGS)
	#( touch twodcode.tgz )
	#( rm twodcode.tgz )
	#tar cvzf $(OBJD)/twodcode.tgz *
#	mv -f ./*.o $(OBJD2)

# dependencies
$(OBJS)	: $(SRCD)/defs.h $(SRCD)/global.h $(SRCD)/makefile.pp

$(OBJD)/timestep.o : $(SRCD)/timestep.h
$(OBJD)/bound.o : $(SRCD)/bound.h
$(OBJD)/postproc.o : $(SRCD)/postproc.h

#$(OBJD)/nrutil.o : $(SRCD)/nrutil.h




cleandat:
	$(RM) $(BIND)/*.dat $(BIND)/*.dat.ras
 
clean:
	$(RM) *.o $(CMD)

